#! /bin/sh

###############################################################################
###									    ###
###		 GNU Interactive Tools per file type action script	    ###
###				   Global version			    ###
###     Copyright (C) 1994-2000, 2006-2007 Free Software Foundation, Inc.   ###
###                                                                         ###
###                  This file is part of gnuit.                            ###
###                                                                         ###
###  gnuit is free software: you can redistribute it and/or modify it       ###
###  under the terms of the GNU General Public License as published         ###
###  by the Free Software Foundation, either version 3 of the               ###
###  License, or (at your option) any later version.                        ###
###                                                                         ###
###  gnuit is distributed in the hope that it will be useful, but           ###
###  WITHOUT ANY WARRANTY; without even the implied warranty of             ###
###  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          ###
###  GNU General Public License for more details.                           ###
###                                                                         ###
###  You should have received a copy of the GNU General Public              ###
###  License along with this program. If not, see                           ###
###  http://www.gnu.org/licenses/.                                          ###
###									    ###
###		    Written by Tudor Hulubei and Andrei Pitis.		    ###
###			  Enhanced by Verdoolaege Sven.		            ###
###									    ###
###############################################################################

###
### This script executes a different action for each file type
### specified.  It tries to match the second parameter against the
### patterns specified in the 'case' statement (see below).
###
### If you want to add new file types & actions to this script, just
### add a new entry to the 'case' statement *before* the last one
### ( *) ... )
###
### For greater flexibility, gitaction's first parameter is the name
### of the directory where the file resides.  The complete file name
### is obtained by appending the file base name to the file path:
### "$1/$2".
###
### If you enhance this script, please send me a patch at
### gnuit-dev@gnu.org.  I'll include it in the next release.
###

###
### Instead of hardcoding `more' or `less' here, we can use GIT_PAGER,
### a shell environment variable that is bound on one of them, depending
### on your environment.  The default is to call `more', but you can
### change GIT_PAGER to point to your favorite pager...
###

###
### Thanks to John Stump for suggesting me to get rid of gitmatch.
### Thanks to Juhapekka Tolvanen <juhtolv@silmu.st.jyu.fi> for the new
### mikmod-related entries.
###

###
### Note:
### Not all the programs called here are able to handle the -- command
### line switch.  These are: emacs, ghostview, tar, basename, ar, xv,
### xanim, xfig, lynx, mpeg_vga, zip/unzip.  There are some that I couldn't
### test.
###
### When these programs will be fixed, we should add -- to them...
### Until then, we will fail to run commands like `xfig -P -P' to
### process a file called `-P'.
###

name=`basename "$0"`
msg="Press ENTER to continue..."
msgView="Press ENTER to view the file with \`$GIT_PAGER', or ^C to abort..."


doexit()
{
    ret=$1
    echo "$msg"; read key;
    exit $ret
}

exitifdone
{
    if test $? -eq 0; then
	doexit
    fi
}

run()
{
    "$@"
    exitifdone
}

try()
{
    cmd="$1"
    shift
    gitwhich "$cmd";
    if test $? -eq 0; then
	run "$cmd" "$@"
    fi
}

tryx()
{
    if test -n "$DISPLAY"
	try "$@"
    fi
}

trypaged()
{
    cmd="$1"
    shift
    gitwhich "$cmd";
    if test $? -eq 0; then
	"$cmd" "$@"  2>&1 | "$GIT_PAGER"
	if test $? -eq 0; then
	    echo "$msg"; read key;
	    exit 1
	fi
    fi
}

totempfile()
{
    tmpfile="${TMPDIR:-/tmp}/gitaction.$$"
    cmd="$1"
    shift
    gitwhich "$cmd";
    if test $? -eq 0; then
	trap "rm -f $tmpfile" 0 1 2 5 15
	$cmd "$@" > "$tmpfile"
	if test $? -eq 0; then
	    echo "$tmpfile"
	fi
    fi
}

tryvideo()
{
    for prog in gmplayer xine totem mplayer xanim aktion;
    do 
	tryx "$prog" "$file"
    done
    try mplayer -vo svga "$file"
}

if test "$#" -ne 2; then
    echo "$name: GIT internal script" >&2
    doexit 1
fi

if test ! -d "$1"; then
    echo "$name: $1 is not a directory"
    doexit 1
fi

if test ! -f "$1/$2"; then
    echo "$name: file $1/$2 does not exist"
    doexit 1
fi

if test -f .gitaction; then
    ./.gitaction "$1" "$2"
    exitifdone
fi

if test -f $HOME/.gitaction; then
    $HOME/.gitaction "$1" "$2"
    exitifdone
fi

file="$1/$2"

istext=0
gitwhich file;
if test $? -eq 0; then
    file "$file" |grep -q '.*:.*text'
    istext=$?
fi

realfile="$file"
lcfile="$(echo "$file"|tr [:upper:] [:lower:])"

# Handle listing compressed archives first, to avoid decompressing
# them to disk just to list them

case "$lcfile" in
    *.tar.gz|*.pkg|*.t[arg]z) trypaged gunzip  -c "$file" | tar tvf -    ;;
    *.tar.bz2)	              trypaged bunzip2 -c "$file" | tar tvf -    ;;
    *.cpio.gz)                trypaged gunzip  -c "$file" | cpio -t 2>&1 ;;
    *.cpio.bz2)               trypaged bunzip2 -c "$file" | cpio -t 2>&1 ;;
esac

if fgrep -q . "$lcfile"; then
    lcbase="$(echo $lcfile |sed -e 's/\(.*\)\..*/\1/')"
else
    lcbase="$lcfile"
fi

tempfile=""
case "$lcfile" in
    *.gz)  tempfile="$(totempfile gunzip -c "$file")" ;;
    *.bz)  tempfile="$(totempfile bunzip -c "$file")" ;;
    *.bz2) tempfile="$(totempfile bzcat "$file")" ;;
    *.z)   tempfile="$(totempfile uncompress -c "$file")" ;;
esac

if test -n "$tempfile"
    file="$tempfile"
    lcfile="$lcbase"
fi

# MacOS only
if test `uname -s` = "Darwin"; then
    # don't run open(1) on text files
    if test $istext -eq 0 ; then
	try open "$file"
    fi;
fi

case "$lcfile" in
*.o |\
*.lo |\
*.so |\
*.so.[0-9]*)
		objdump --syms --all-headers -- "$file" | "$GIT_PAGER"
		doexit;;
*.a|*.sa)	trypaged ar -tv "$file"  ;;
*.tar)		trypaged tar tvf "$file" ;;
*.cpio)		trypaged cat "$file" | cpio -t 2>&1
*.man)		trypaged nroff -man "$file" ;;

*.html|*.htm)	if test "$GIT_BROWSER"; then
		    try "$GIT_BROWSER" "$file"
		else
		    try lynx "$file"
		fi;;

utmp)		trypaged w ;;

wtmp | wtmp.[0-9]*)
		trypaged last -f "$file" ;;

*ring.pgp)	trypaged pgp -kv -- "$file" ;;
*pgp)		try pgp -- "$file" ;;
*gpg)		try gpgv -- "$file" ;;
*.fig)		tryx xfig "$file" ;;

*.ppt)		tryx openoffice "$file"
		tryx soffice "$file" ;;
*.gif | *.jpg | *.jpeg |
*.tga | *.bmp | *.ppm |
*.pnm | *.pgm | *.pbm |
*.tif | *.tiff | *.bm |
*.xbm | *.xpm | *.ras |
*.rgb | *.png | *.fts)
		tryx xzgv        "$file"
		tryx kview       "$file"
		tryx ee          "$file"
		tryx display     "$file"
		tryx gimp        "$file"
		tryx xv          "$file"
		try  zgv         "$file" ;;

*.xcf | *.fit)	tryx gimp        "$file" ;;

*.mp[23])	tryx audacious   "$file"
		tryx xmms        "$file"
		tryx amp         "$file"
		tryx x11amp      "$file"
		try  mpg123 -v   "$file"
		try  mpg123 -v   "$file"
		try  amp         "$file" ;;

*.asf | *.wmv |
*.mov | *.avi)	tryvideo         "$file" ;;

*.mp[4g]|*.mpeg) tryvideo        "$file" 
		 try mpeg_vga    "$file" ;;

*.fl[icv])	tryvideo         "$file" 
		try flip         "$file" ;;

*.gl)		tryx xgrasp "$file" ;;

*.mod | *.mod.lha | *.mod.lzh | *.mod.zip |\
*.669 | *.669.lha | *.669.lzh | *.669.zip |\
*.dsm | *.dsm.lha | *.dsm.lzh | *.dsm.zip |\
*.far | *.far.lha | *.far.lzh | *.far.zip |\
*.med | *.med.lha | *.med.lzh | *.med.zip |\
*.mtm | *.mtm.lha | *.mtm.lzh | *.mtm.zip |\
*.ult | *.ult.lha | *.ult.lzh | *.ult.zip |\
*.it | *.it.lha | *.it.lzh | *.it.zip |\
*.xm | *.xm.lha | *.xm.lzh | *.xm.zip |\ 
*.s[3t]m | *.s[3t]m.lha| *.s[3t]m.lzh| *.s[3t]m.zip)
		(mikmod -t "$file" > /dev/null 2>&1 &);;

*.r[av] |\
*.ram)
		for prog in gmplayer mplayer realplay rvplayer raplayer; 
		do
		    tryx "$prog" "$file"
		done;;
*.voc)		(vplay "$file" > /dev/null 2>&1 &);;

*.wav)
		for prog in audacious xmms kmedia wavplay
		do
		    tryx "$prog" "$file"
		done
		try wavplay "$file" ;;

*.aiff)		 echo "No AIFF player known."
		 echo "$msgView"; read key
		 "$GIT_PAGER" "$file"
		 echo "$msg"; read key;;

*.aifc)		 echo "No AIFC player known."
		 echo "$msgView"; read key
		 "$GIT_PAGER" "$file"
		 echo "$msg"; read key;;

*.rmd)		(rmdtopvf -8 "$file" 2> /dev/null |
		 pvftobasic > /dev/audio 2> /dev/null &);;

*.pvf)		(pvftobasic > /dev/audio 2> /dev/null &);;
*.au)		(cat "$file" > /dev/audio 2> /dev/null &);;

*.midi |*.mid)	(playmidi $PLAYMIDIOPT "$file" > /dev/null 2>&1 &);;

*.sf2 | *.sfx | *.sbk)
		tryx swami         "$file" ;;

*.ps | *.eps)	tryx evince        "$file"
		tryx gv            "$file"
		tryx kghostview    "$file"
		tryx ggv           "$file"
		tryx ghostview     "$file"
		try  gs            "$file" ;;

*.dvi)		tryx kdvi          "$file"
		tryx xdvi          "$file" ;;

*.lyx)		tryx klyx          "$file"
		tryx lyx           "$file" ;;

*.doc)		tryx openoffice    "$file" 
		tryx AbiWord       "$file"
		tryx soffice       "$file" ;;

*.pdf)		tryx evince        "$file"
		tryx acroread      "$file"
		tryx xpdf          "$file" ;;

*.ms)		trypaged nroff -ms "$file" ;;

*.[1-9n] |\
*.[1-9n][xXmM])
		trypaged nroff -man "$file" ;;

*.[iI]nfo)	try info --file "$file";;

[SR]MAIL)	try emacs   "$file"
		try xemacs  "$file" ;;

INBOX|OUTBOX)	try xemacs  "$file" ;;


*.arj |\
*.a[0-9][1-9])	trypaged unarj l "$file"  ;;
*.zip)		trypaged unzip -v "$file" ;;
*.rar)		trypaged unrar l "$file"  ;;
*.jar)		trypaged jar tvf "$file"  ;;
*.lha|*.lzh)	trypaged lha -v "$file"   ;;
*.class)	trypaged javap -c -s -l -verbose "$(basename "$realfile" .class)" ;;
*.rpm)		trypaged rpm -qilRsp -- "$file" ;;

*.deb)		(echo "$file"; dpkg --info "$file"
		 echo; dpkg --contents "$file") | "$GIT_PAGER"
		echo "$msg"; read key;;
*)
		if test -x "$file"; then
		    if test `uname` = "Linux"; then
			FILE_OPTIONS="-L"
		    fi
		    file $FILE_OPTIONS "$file" | grep "ELF" > /dev/null 2>&1
		    if test $? -eq 0; then
		        file $FILE_OPTIONS "$file"
		        ldd "$file"
		        echo "$msg"; read key
		        exit
		    fi
		fi
		FILEOUT="`file --mime-type "$file" 2>/dev/null`"
		if test $? -eq 0; then
		    MIMETYPE=`echo "$FILEOUT" | sed 's/.*: *//;'`
		fi
		if test -n "$MIMETYPE"; then
		    try see "${MIMETYPE}:${file}"
		    try metamail -d -b -c "$MIMETYPE" "$file"
	        fi
		try "$GIT_PAGER" "$file"
		try less         "$file"
		try more         "$file"
		try cat          "$file"
esac

exit 0
